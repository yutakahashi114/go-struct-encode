// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: struct.proto

package proto

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TestStructs struct {
	Ss []*TestStruct `protobuf:"bytes,1,rep,name=ss,proto3" json:"ss,omitempty"`
}

func (m *TestStructs) Reset()         { *m = TestStructs{} }
func (m *TestStructs) String() string { return proto.CompactTextString(m) }
func (*TestStructs) ProtoMessage()    {}
func (*TestStructs) Descriptor() ([]byte, []int) {
	return fileDescriptor_0605f6bcb0ae6db1, []int{0}
}
func (m *TestStructs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestStructs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestStructs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestStructs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestStructs.Merge(m, src)
}
func (m *TestStructs) XXX_Size() int {
	return m.Size()
}
func (m *TestStructs) XXX_DiscardUnknown() {
	xxx_messageInfo_TestStructs.DiscardUnknown(m)
}

var xxx_messageInfo_TestStructs proto.InternalMessageInfo

func (m *TestStructs) GetSs() []*TestStruct {
	if m != nil {
		return m.Ss
	}
	return nil
}

type TestStruct struct {
	Str        string           `protobuf:"bytes,1,opt,name=str,proto3" json:"str,omitempty"`
	Bool       bool             `protobuf:"varint,2,opt,name=bool,proto3" json:"bool,omitempty"`
	Int        int64            `protobuf:"varint,3,opt,name=int,proto3" json:"int,omitempty"`
	Int16      int32            `protobuf:"varint,4,opt,name=int16,proto3" json:"int16,omitempty"`
	Int64      int64            `protobuf:"varint,5,opt,name=int64,proto3" json:"int64,omitempty"`
	Uint       uint64           `protobuf:"varint,6,opt,name=uint,proto3" json:"uint,omitempty"`
	Uint8      uint32           `protobuf:"varint,7,opt,name=uint8,proto3" json:"uint8,omitempty"`
	Uint32     uint32           `protobuf:"varint,8,opt,name=uint32,proto3" json:"uint32,omitempty"`
	Time       *types.Timestamp `protobuf:"bytes,9,opt,name=time,proto3" json:"time,omitempty"`
	SubPointer *TestSubStruct   `protobuf:"bytes,10,opt,name=sub_pointer,json=subPointer,proto3" json:"sub_pointer,omitempty"`
	Subs       []*TestSubStruct `protobuf:"bytes,11,rep,name=subs,proto3" json:"subs,omitempty"`
}

func (m *TestStruct) Reset()         { *m = TestStruct{} }
func (m *TestStruct) String() string { return proto.CompactTextString(m) }
func (*TestStruct) ProtoMessage()    {}
func (*TestStruct) Descriptor() ([]byte, []int) {
	return fileDescriptor_0605f6bcb0ae6db1, []int{1}
}
func (m *TestStruct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestStruct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestStruct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestStruct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestStruct.Merge(m, src)
}
func (m *TestStruct) XXX_Size() int {
	return m.Size()
}
func (m *TestStruct) XXX_DiscardUnknown() {
	xxx_messageInfo_TestStruct.DiscardUnknown(m)
}

var xxx_messageInfo_TestStruct proto.InternalMessageInfo

func (m *TestStruct) GetStr() string {
	if m != nil {
		return m.Str
	}
	return ""
}

func (m *TestStruct) GetBool() bool {
	if m != nil {
		return m.Bool
	}
	return false
}

func (m *TestStruct) GetInt() int64 {
	if m != nil {
		return m.Int
	}
	return 0
}

func (m *TestStruct) GetInt16() int32 {
	if m != nil {
		return m.Int16
	}
	return 0
}

func (m *TestStruct) GetInt64() int64 {
	if m != nil {
		return m.Int64
	}
	return 0
}

func (m *TestStruct) GetUint() uint64 {
	if m != nil {
		return m.Uint
	}
	return 0
}

func (m *TestStruct) GetUint8() uint32 {
	if m != nil {
		return m.Uint8
	}
	return 0
}

func (m *TestStruct) GetUint32() uint32 {
	if m != nil {
		return m.Uint32
	}
	return 0
}

func (m *TestStruct) GetTime() *types.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *TestStruct) GetSubPointer() *TestSubStruct {
	if m != nil {
		return m.SubPointer
	}
	return nil
}

func (m *TestStruct) GetSubs() []*TestSubStruct {
	if m != nil {
		return m.Subs
	}
	return nil
}

type TestSubStruct struct {
	Str    string           `protobuf:"bytes,1,opt,name=str,proto3" json:"str,omitempty"`
	Bool   bool             `protobuf:"varint,2,opt,name=bool,proto3" json:"bool,omitempty"`
	Int    int64            `protobuf:"varint,3,opt,name=int,proto3" json:"int,omitempty"`
	Int16  int32            `protobuf:"varint,4,opt,name=int16,proto3" json:"int16,omitempty"`
	Int64  int64            `protobuf:"varint,5,opt,name=int64,proto3" json:"int64,omitempty"`
	Uint   uint64           `protobuf:"varint,6,opt,name=uint,proto3" json:"uint,omitempty"`
	Uint8  uint32           `protobuf:"varint,7,opt,name=uint8,proto3" json:"uint8,omitempty"`
	Uint32 uint32           `protobuf:"varint,8,opt,name=uint32,proto3" json:"uint32,omitempty"`
	Time   *types.Timestamp `protobuf:"bytes,9,opt,name=time,proto3" json:"time,omitempty"`
}

func (m *TestSubStruct) Reset()         { *m = TestSubStruct{} }
func (m *TestSubStruct) String() string { return proto.CompactTextString(m) }
func (*TestSubStruct) ProtoMessage()    {}
func (*TestSubStruct) Descriptor() ([]byte, []int) {
	return fileDescriptor_0605f6bcb0ae6db1, []int{2}
}
func (m *TestSubStruct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestSubStruct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestSubStruct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestSubStruct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestSubStruct.Merge(m, src)
}
func (m *TestSubStruct) XXX_Size() int {
	return m.Size()
}
func (m *TestSubStruct) XXX_DiscardUnknown() {
	xxx_messageInfo_TestSubStruct.DiscardUnknown(m)
}

var xxx_messageInfo_TestSubStruct proto.InternalMessageInfo

func (m *TestSubStruct) GetStr() string {
	if m != nil {
		return m.Str
	}
	return ""
}

func (m *TestSubStruct) GetBool() bool {
	if m != nil {
		return m.Bool
	}
	return false
}

func (m *TestSubStruct) GetInt() int64 {
	if m != nil {
		return m.Int
	}
	return 0
}

func (m *TestSubStruct) GetInt16() int32 {
	if m != nil {
		return m.Int16
	}
	return 0
}

func (m *TestSubStruct) GetInt64() int64 {
	if m != nil {
		return m.Int64
	}
	return 0
}

func (m *TestSubStruct) GetUint() uint64 {
	if m != nil {
		return m.Uint
	}
	return 0
}

func (m *TestSubStruct) GetUint8() uint32 {
	if m != nil {
		return m.Uint8
	}
	return 0
}

func (m *TestSubStruct) GetUint32() uint32 {
	if m != nil {
		return m.Uint32
	}
	return 0
}

func (m *TestSubStruct) GetTime() *types.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func init() {
	proto.RegisterType((*TestStructs)(nil), "proto.TestStructs")
	proto.RegisterType((*TestStruct)(nil), "proto.TestStruct")
	proto.RegisterType((*TestSubStruct)(nil), "proto.TestSubStruct")
}

func init() { proto.RegisterFile("struct.proto", fileDescriptor_0605f6bcb0ae6db1) }

var fileDescriptor_0605f6bcb0ae6db1 = []byte{
	// 323 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x90, 0x4f, 0x4e, 0x02, 0x31,
	0x18, 0xc5, 0xe9, 0xfc, 0x41, 0xf8, 0x46, 0x12, 0x6d, 0x88, 0x69, 0x58, 0x8c, 0x95, 0x55, 0x57,
	0x83, 0x82, 0x12, 0xd7, 0x9e, 0xc0, 0x54, 0xf6, 0xc6, 0x9a, 0x91, 0x4c, 0x02, 0x94, 0xcc, 0xd7,
	0xde, 0xc3, 0x3b, 0xb9, 0x71, 0xc9, 0xd2, 0xa5, 0x81, 0x78, 0x0f, 0xd3, 0x76, 0x08, 0x9a, 0x78,
	0x02, 0x57, 0xdf, 0x7b, 0x6f, 0x7e, 0x6f, 0x92, 0x3e, 0x38, 0x46, 0x53, 0xdb, 0x67, 0x53, 0xac,
	0x6b, 0x6d, 0x34, 0x4d, 0xfd, 0x19, 0x9c, 0xcf, 0xb5, 0x9e, 0x2f, 0xca, 0x91, 0x77, 0xca, 0xbe,
	0x8c, 0x4c, 0xb5, 0x2c, 0xd1, 0x3c, 0x2d, 0xd7, 0x81, 0x1b, 0x5e, 0x42, 0x36, 0x2b, 0xd1, 0x3c,
	0xf8, 0x2e, 0xd2, 0x0b, 0x88, 0x10, 0x19, 0xe1, 0xb1, 0xc8, 0xc6, 0xa7, 0x01, 0x29, 0x0e, 0xdf,
	0x65, 0x84, 0x38, 0x7c, 0x8b, 0x00, 0x0e, 0x11, 0x3d, 0x81, 0x18, 0x4d, 0xcd, 0x08, 0x27, 0xa2,
	0x2b, 0x9d, 0xa4, 0x14, 0x12, 0xa5, 0xf5, 0x82, 0x45, 0x9c, 0x88, 0x8e, 0xf4, 0xda, 0x51, 0xd5,
	0xca, 0xb0, 0x98, 0x13, 0x11, 0x4b, 0x27, 0x69, 0x1f, 0xd2, 0x6a, 0x65, 0xae, 0xa6, 0x2c, 0xe1,
	0x44, 0xa4, 0x32, 0x98, 0x26, 0x9d, 0x5e, 0xb3, 0xd4, 0x93, 0xc1, 0xb8, 0x3f, 0x5a, 0x57, 0x6f,
	0x73, 0x22, 0x12, 0xe9, 0xb5, 0x23, 0xdd, 0xbd, 0x65, 0x47, 0x9c, 0x88, 0x9e, 0x0c, 0x86, 0x9e,
	0x41, 0xdb, 0x89, 0xc9, 0x98, 0x75, 0x7c, 0xdc, 0x38, 0x5a, 0x40, 0xe2, 0x5e, 0xce, 0xba, 0x9c,
	0x88, 0x6c, 0x3c, 0x28, 0xc2, 0x2c, 0xc5, 0x7e, 0x96, 0x62, 0xb6, 0x9f, 0x45, 0x7a, 0x8e, 0xde,
	0x40, 0x86, 0x56, 0x3d, 0xae, 0x75, 0xb5, 0x32, 0x65, 0xcd, 0xc0, 0xd7, 0xfa, 0x3f, 0x07, 0xb1,
	0xaa, 0xd9, 0x04, 0xd0, 0xaa, 0xfb, 0xc0, 0x51, 0x01, 0x09, 0x5a, 0x85, 0x2c, 0xf3, 0x03, 0xfe,
	0xcd, 0x7b, 0x62, 0xf8, 0x45, 0xa0, 0xf7, 0x2b, 0xff, 0x9f, 0x43, 0xde, 0xb1, 0xf7, 0x6d, 0x4e,
	0x36, 0xdb, 0x9c, 0x7c, 0x6e, 0x73, 0xf2, 0xba, 0xcb, 0x5b, 0x9b, 0x5d, 0xde, 0xfa, 0xd8, 0xe5,
	0x2d, 0xd5, 0xf6, 0x9d, 0xc9, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2f, 0xf7, 0xf3, 0x25, 0xb8,
	0x02, 0x00, 0x00,
}

func (m *TestStructs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestStructs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestStructs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ss) > 0 {
		for iNdEx := len(m.Ss) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ss[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStruct(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TestStruct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestStruct) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestStruct) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Subs) > 0 {
		for iNdEx := len(m.Subs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Subs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStruct(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.SubPointer != nil {
		{
			size, err := m.SubPointer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStruct(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.Time != nil {
		{
			size, err := m.Time.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStruct(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Uint32 != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.Uint32))
		i--
		dAtA[i] = 0x40
	}
	if m.Uint8 != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.Uint8))
		i--
		dAtA[i] = 0x38
	}
	if m.Uint != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.Uint))
		i--
		dAtA[i] = 0x30
	}
	if m.Int64 != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.Int64))
		i--
		dAtA[i] = 0x28
	}
	if m.Int16 != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.Int16))
		i--
		dAtA[i] = 0x20
	}
	if m.Int != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.Int))
		i--
		dAtA[i] = 0x18
	}
	if m.Bool {
		i--
		if m.Bool {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Str) > 0 {
		i -= len(m.Str)
		copy(dAtA[i:], m.Str)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.Str)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TestSubStruct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestSubStruct) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TestSubStruct) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Time != nil {
		{
			size, err := m.Time.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStruct(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Uint32 != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.Uint32))
		i--
		dAtA[i] = 0x40
	}
	if m.Uint8 != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.Uint8))
		i--
		dAtA[i] = 0x38
	}
	if m.Uint != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.Uint))
		i--
		dAtA[i] = 0x30
	}
	if m.Int64 != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.Int64))
		i--
		dAtA[i] = 0x28
	}
	if m.Int16 != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.Int16))
		i--
		dAtA[i] = 0x20
	}
	if m.Int != 0 {
		i = encodeVarintStruct(dAtA, i, uint64(m.Int))
		i--
		dAtA[i] = 0x18
	}
	if m.Bool {
		i--
		if m.Bool {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Str) > 0 {
		i -= len(m.Str)
		copy(dAtA[i:], m.Str)
		i = encodeVarintStruct(dAtA, i, uint64(len(m.Str)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStruct(dAtA []byte, offset int, v uint64) int {
	offset -= sovStruct(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TestStructs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ss) > 0 {
		for _, e := range m.Ss {
			l = e.Size()
			n += 1 + l + sovStruct(uint64(l))
		}
	}
	return n
}

func (m *TestStruct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Str)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	if m.Bool {
		n += 2
	}
	if m.Int != 0 {
		n += 1 + sovStruct(uint64(m.Int))
	}
	if m.Int16 != 0 {
		n += 1 + sovStruct(uint64(m.Int16))
	}
	if m.Int64 != 0 {
		n += 1 + sovStruct(uint64(m.Int64))
	}
	if m.Uint != 0 {
		n += 1 + sovStruct(uint64(m.Uint))
	}
	if m.Uint8 != 0 {
		n += 1 + sovStruct(uint64(m.Uint8))
	}
	if m.Uint32 != 0 {
		n += 1 + sovStruct(uint64(m.Uint32))
	}
	if m.Time != nil {
		l = m.Time.Size()
		n += 1 + l + sovStruct(uint64(l))
	}
	if m.SubPointer != nil {
		l = m.SubPointer.Size()
		n += 1 + l + sovStruct(uint64(l))
	}
	if len(m.Subs) > 0 {
		for _, e := range m.Subs {
			l = e.Size()
			n += 1 + l + sovStruct(uint64(l))
		}
	}
	return n
}

func (m *TestSubStruct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Str)
	if l > 0 {
		n += 1 + l + sovStruct(uint64(l))
	}
	if m.Bool {
		n += 2
	}
	if m.Int != 0 {
		n += 1 + sovStruct(uint64(m.Int))
	}
	if m.Int16 != 0 {
		n += 1 + sovStruct(uint64(m.Int16))
	}
	if m.Int64 != 0 {
		n += 1 + sovStruct(uint64(m.Int64))
	}
	if m.Uint != 0 {
		n += 1 + sovStruct(uint64(m.Uint))
	}
	if m.Uint8 != 0 {
		n += 1 + sovStruct(uint64(m.Uint8))
	}
	if m.Uint32 != 0 {
		n += 1 + sovStruct(uint64(m.Uint32))
	}
	if m.Time != nil {
		l = m.Time.Size()
		n += 1 + l + sovStruct(uint64(l))
	}
	return n
}

func sovStruct(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStruct(x uint64) (n int) {
	return sovStruct(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TestStructs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestStructs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestStructs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ss = append(m.Ss, &TestStruct{})
			if err := m.Ss[len(m.Ss)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestStruct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestStruct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestStruct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Str", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Str = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bool", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Bool = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int", wireType)
			}
			m.Int = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Int |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int16", wireType)
			}
			m.Int16 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Int16 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64", wireType)
			}
			m.Int64 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Int64 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uint", wireType)
			}
			m.Uint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uint |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uint8", wireType)
			}
			m.Uint8 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uint8 |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uint32", wireType)
			}
			m.Uint32 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uint32 |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Time == nil {
				m.Time = &types.Timestamp{}
			}
			if err := m.Time.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubPointer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SubPointer == nil {
				m.SubPointer = &TestSubStruct{}
			}
			if err := m.SubPointer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subs = append(m.Subs, &TestSubStruct{})
			if err := m.Subs[len(m.Subs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestSubStruct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestSubStruct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestSubStruct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Str", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Str = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bool", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Bool = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int", wireType)
			}
			m.Int = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Int |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int16", wireType)
			}
			m.Int16 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Int16 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64", wireType)
			}
			m.Int64 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Int64 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uint", wireType)
			}
			m.Uint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uint |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uint8", wireType)
			}
			m.Uint8 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uint8 |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uint32", wireType)
			}
			m.Uint32 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uint32 |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStruct
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStruct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Time == nil {
				m.Time = &types.Timestamp{}
			}
			if err := m.Time.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStruct(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStruct
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStruct
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStruct
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStruct
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStruct
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStruct        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStruct          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStruct = fmt.Errorf("proto: unexpected end of group")
)
